 import java.util.Arrays;
 
public class HashFunction {
	String[] theArray;
	int arraySize;
	int itemsInArray = 0;
	
	// If we think of a Hash Table as an array
	// then a hash function is used to generate
	// a unique key for every item in the array.
	// The position the item goes in is known
	// as the slot. Hashing doesn't work very well
	// in situations in which duplicate data
	// is stored. Also it isn't good for searching
	// for anything except a specific key. 
	// However a Hash Table is a data structure that 
	// offers fast insertion and searching capabilities.
	
	public static void main(String[] args){
		
		HashFunction theFunc = new HashFunction(30);
		
		//Simplest Hash function
		
		//String[] elementsToAdd = { "1", "5", "17", "21", "26" };
		
		//theFunc.hashFunction1(elementsToAdd, theFunc.theArray);
		
		//Mod Hash Function
		//This contains exactly 30 items to show how collisions
		//will work
		
		String[] elementsToAdd2 = {"100", "510", "170", "214", "268", "398",
				"235", "802", "900", "723", "699", "1", "16", "999", "890",
				"725", "998", "978", "988", "990", "989", "984", "320", "321",
				"400", "415", "450", "50", "660", "624" };
	
		theFunc.hashFunction2(elementsToAdd2, theFunc.theArray);
		
		//locate the value 660 in the Hash Table
		
		theFunc.findKey("660");
		
		theFunc.displayTheStack();
		
	}
		
		
	//simple hash function that puts values in the same
	//index that matches their value
	
	public void hashFunction(String[] stringsForArray, String[] theArray){
	
		for(int n = 0; n < stringsForArray.length; n++){
			String newElementVal = stringsForArray[n];
			theArray[Integer.parseInt(newElementVal)] = newElementVal;
		}
		
	}
	
	// Now let's say we have to hold values between 0 & 999
		// but we never plan to have more than 15 values in all.
		// It wouldn't make sense to make a 1000 item array, so
		// what can we do?

		// One way to fit these numbers into a 30 item array is
		// to use the mod function. All you do is take the modulus
		// of the value versus the array size

		// The goal is to make the array big enough to avoid
		// collisions, but not so big that we waste memory
	
	public void ashFunction2(String[] stringsForArray, String[] theArray){
		
		for()
		
	}
	
	
		
		
		
		
		
		
		
		
	}
}
